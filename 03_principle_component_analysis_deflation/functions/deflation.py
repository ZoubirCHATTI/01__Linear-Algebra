# -*- coding: utf-8 -*-
"""deflation1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zbEkvhs3JxUnKzTzKFt-FTr0WP42VYWq
"""

import numpy as np
#Creation of a function that generates symmetric matrices
def centering(A):
  h, w=A.shape
  A_centered=A-A.mean(axis=0)
  cov=np.dot(A_centered.T, A_centered)/(h-1)
  return A_centered, cov

#Power iteration method
def P_I(A, n_iter, epsilon):
  x=np.random.rand(A.shape[0])
  x=(x/np.linalg.norm(x))
  for i in range(n_iter):
    y=np.dot(A , x)/np.linalg.norm(np.dot(A, x))
    if np.linalg.norm( y-x) < epsilon:
      break
    x=y
  lambda_=np.dot(y.T, np.dot(A, y))
  y=y.reshape(-1 , 1)
  return y, lambda_

#Implementation of deflation method
def deflation(A, n_iter, epsilon):
  A_copy=A.copy()
  val_pr=[]
  vec_pr=[]
  for i in range(A_copy.shape[0]):
    y, l=P_I(A_copy, n_iter, epsilon)
    A_copy-=l*np.dot(y, y.T)
    val_pr.append(l)
    vec_pr.append(y)
  eigenvecs=np.hstack(vec_pr)
  return val_pr, eigenvecs